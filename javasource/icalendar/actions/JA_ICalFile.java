// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package icalendar.actions;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.TimeZone;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class JA_ICalFile extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String UID;
	private java.lang.Long Sequence;
	private java.util.Date StartDateTime;
	private java.util.Date EndDateTime;
	private java.lang.String TimeZoneCode;
	private java.lang.String Subject;
	private java.lang.String BodyText;
	private java.lang.String Location;
	private java.lang.String OrganizerEmail;
	private java.lang.String AttendeeEmails;
	private java.lang.Boolean Cancel;
	private IMendixObject __IcalFile;
	private system.proxies.FileDocument IcalFile;

	public JA_ICalFile(IContext context, java.lang.String UID, java.lang.Long Sequence, java.util.Date StartDateTime, java.util.Date EndDateTime, java.lang.String TimeZoneCode, java.lang.String Subject, java.lang.String BodyText, java.lang.String Location, java.lang.String OrganizerEmail, java.lang.String AttendeeEmails, java.lang.Boolean Cancel, IMendixObject IcalFile)
	{
		super(context);
		this.UID = UID;
		this.Sequence = Sequence;
		this.StartDateTime = StartDateTime;
		this.EndDateTime = EndDateTime;
		this.TimeZoneCode = TimeZoneCode;
		this.Subject = Subject;
		this.BodyText = BodyText;
		this.Location = Location;
		this.OrganizerEmail = OrganizerEmail;
		this.AttendeeEmails = AttendeeEmails;
		this.Cancel = Cancel;
		this.__IcalFile = IcalFile;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.IcalFile = this.__IcalFile == null ? null : system.proxies.FileDocument.initialize(getContext(), __IcalFile);

		// BEGIN USER CODE
        if (IcalFile == null) {
            return false;
        }
		
		// Convert the dates
	    Date 	start 	= convertToUtcDateTime(StartDateTime.toInstant(), TimeZoneCode), 
	    		end 	= convertToUtcDateTime(EndDateTime.toInstant(), TimeZoneCode);
	    
	    String method = this.Cancel ? "CANCEL" : "PUBLISH";
		
	    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd'T'HHmmss'Z'");

	    StringBuilder icalBuilder = new StringBuilder();
	    icalBuilder.append("BEGIN:VCALENDAR\n");
	    icalBuilder.append("VERSION:2.0\n");
	    icalBuilder.append("PRODID:-//Mendix//iCal4j\n");
	    icalBuilder.append("METHOD:" + method + "\n");
	    icalBuilder.append("CALSCALE:GREGORIAN\n");
	    icalBuilder.append("BEGIN:VEVENT\n");
	    icalBuilder.append("DTSTAMP:" + dateFormat.format(new Date()) + "\n");
	    icalBuilder.append("DTSTART:" + dateFormat.format(start) + "\n");
	    icalBuilder.append("DTEND:" + dateFormat.format(end) + "\n");
	    icalBuilder.append("SUMMARY:" + Subject + "\n");
	    icalBuilder.append("SEQUENCE:" + Sequence + "\n");
	    icalBuilder.append("ORGANIZER:mailto:" + OrganizerEmail + "\n");
	    
        getAttendees(this.AttendeeEmails).forEach(mail -> {
        	icalBuilder.append("ATTENDEE;ROLE=REQ-PARTICIPANT;PARTSTAT=NEEDS-ACTION;RSVP=TRUE:mailto:" + mail + "\n");
        });
	    
	    icalBuilder.append("UID:" + UID + "\n");
	    icalBuilder.append("LOCATION:" + Location + "\n");
	    icalBuilder.append("DESCRIPTION:" + BodyText + "\n");
	    icalBuilder.append("END:VEVENT\n");
	    icalBuilder.append("END:VCALENDAR\n");
	    
		Charset charset = StandardCharsets.UTF_8;
        byte[] byteArray = icalBuilder.toString().getBytes(charset);
        try (InputStream is = new ByteArrayInputStream(byteArray)) {
            // Your code to store the InputStream content
            Core.storeFileDocumentContent(getContext(), this.__IcalFile, is);
            this.IcalFile.setName(getContext(), "event.ics");
        } catch (Exception e) {
        	LOG.error(e);
        }
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_ICalFile";
	}

	// BEGIN EXTRA CODE
    private static java.util.stream.Stream<String> getAttendees(String recipients) {
        if (recipients == null) {
            return java.util.stream.Stream.empty(); // Return an empty stream if recipients are null
        }

        return java.util.Arrays.stream(recipients.split("[,;]")).map(String::trim);
    }
    
    public static Date convertToUtcDateTime(Instant date, String timeZoneId) throws Exception {
    	// First we have to know to what timezone we want to convert the time to
    	TimeZone timeZone = null;
    	
    	if (timeZoneId != null) {
    		timeZone = TimeZone.getTimeZone(timeZoneId);
    	} else {
        	// Get the default time zone offset of the system
    		timeZone = TimeZone.getDefault();
    	}
        
    	// Then remove the offset from the date we end up with the correct UTC time
        long dateTimeMillis = date.toEpochMilli();
        int totalOffsetMillis = timeZone.getOffset(dateTimeMillis);
        
        Instant dateMinus = date.minusMillis(totalOffsetMillis);
        date = dateMinus;
        
        // Then to remove the timezone data from the date so that it get parse properly we convert to a formatted String, Example: "2023-08-03T14:00:00Z"
        DateTimeFormatter formatter = DateTimeFormatter.ISO_INSTANT;
        String formattedString  = formatter.format(date);
        LOG.info("formattedString " + formattedString);
        
        // Parse it back to a date
    	Date newDate = null;
        if (formattedString.length() == 20) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
            newDate = sdf.parse(formattedString);
        } else {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
            newDate = sdf.parse(formattedString);
        }
        return newDate;
    }
    
    public static Date applyTimeZone(Date dateTime, String timeZoneId) {
        Date tempDate = dateTime;
		return tempDate;
    }
    
    public static ILogNode LOG = Core.getLogger("iCalendar");
	// END EXTRA CODE
}
