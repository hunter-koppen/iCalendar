// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package icalendar.actions;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.net.URI;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.TimeZone;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import net.fortuna.ical4j.data.CalendarBuilder;
import net.fortuna.ical4j.model.Calendar;
import net.fortuna.ical4j.model.DateTime;
import net.fortuna.ical4j.model.Property;
import net.fortuna.ical4j.model.TimeZoneRegistry;
import net.fortuna.ical4j.model.TimeZoneRegistryFactory;
import net.fortuna.ical4j.model.component.VEvent;
import net.fortuna.ical4j.model.component.VTimeZone;
import net.fortuna.ical4j.model.parameter.PartStat;
import net.fortuna.ical4j.model.parameter.Role;
import net.fortuna.ical4j.model.parameter.Rsvp;
import net.fortuna.ical4j.model.property.Attendee;
import net.fortuna.ical4j.model.property.CalScale;
import net.fortuna.ical4j.model.property.Description;
import net.fortuna.ical4j.model.property.Method;
import net.fortuna.ical4j.model.property.Location;
import net.fortuna.ical4j.model.property.Sequence;
import net.fortuna.ical4j.model.property.Organizer;
import net.fortuna.ical4j.model.property.ProdId;
import net.fortuna.ical4j.model.property.Uid;
import net.fortuna.ical4j.model.property.Version;
import net.fortuna.ical4j.util.Calendars;
import net.fortuna.ical4j.validate.Validator;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class JA_ICalFile extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String UID;
	private java.lang.Long Sequence;
	private java.util.Date StartDateTime;
	private java.util.Date EndDateTime;
	private java.lang.String Subject;
	private java.lang.String BodyText;
	private java.lang.String Location;
	private java.lang.String OrganizerEmail;
	private java.lang.String AttendeeEmails;
	private java.lang.Boolean Cancel;
	private IMendixObject __IcalFile;
	private system.proxies.FileDocument IcalFile;

	public JA_ICalFile(IContext context, java.lang.String UID, java.lang.Long Sequence, java.util.Date StartDateTime, java.util.Date EndDateTime, java.lang.String Subject, java.lang.String BodyText, java.lang.String Location, java.lang.String OrganizerEmail, java.lang.String AttendeeEmails, java.lang.Boolean Cancel, IMendixObject IcalFile)
	{
		super(context);
		this.UID = UID;
		this.Sequence = Sequence;
		this.StartDateTime = StartDateTime;
		this.EndDateTime = EndDateTime;
		this.Subject = Subject;
		this.BodyText = BodyText;
		this.Location = Location;
		this.OrganizerEmail = OrganizerEmail;
		this.AttendeeEmails = AttendeeEmails;
		this.Cancel = Cancel;
		this.__IcalFile = IcalFile;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.IcalFile = this.__IcalFile == null ? null : system.proxies.FileDocument.initialize(getContext(), __IcalFile);

		// BEGIN USER CODE
        if (IcalFile == null) {
            return false;
        }
		
		// Create a new calendar
	    Calendar calendar = new Calendar();

	    // Set the calendar properties
	    calendar.getProperties().add(Version.VERSION_2_0);
	    calendar.getProperties().add(new ProdId("-//Mendix//iCal4j"));
	    calendar.getProperties().add(this.Cancel ? Method.CANCEL : Method.REQUEST);
	    calendar.getProperties().add(CalScale.GREGORIAN);

	    // Create a timezone
	    TimeZoneRegistry registry = TimeZoneRegistryFactory.getInstance().createRegistry();
	    TimeZone timezone = registry.getTimeZone(TimeZone.getDefault().getID());
	    VTimeZone vt = ((net.fortuna.ical4j.model.TimeZone) timezone).getVTimeZone();
	    
	    // Add the timezone to the calendar
		calendar.getComponents().add(vt);
		
		// Convert the dates
	    DateTime start 	= new DateTime(this.StartDateTime), 
	    		 end 	= new DateTime(this.EndDateTime);
	    
	    // Create the event component.
	    VEvent event = new VEvent(start, end, this.Subject);

	    Property 
	    		organizer 	= new Organizer(URI.create("mailto:" + this.OrganizerEmail)), 
	    		description = new Description(this.BodyText), 
	    		uid 		= new Uid(this.UID), 
	    		location 	= new Location(this.Location), 
	    		sequence 	= new Sequence((this.Sequence.toString())
	    );

	    event.getProperties().add(sequence);
	    event.getProperties().add(organizer);
	    event.getProperties().add(uid);
	    event.getProperties().add(location);
	    event.getProperties().add(description);

        getAttendees(this.AttendeeEmails).forEach(mail -> {
            Attendee attendee = new Attendee(URI.create("mailto:" + mail));
            attendee.getParameters().add(Role.REQ_PARTICIPANT);
            attendee.getParameters().add(PartStat.NEEDS_ACTION);
            attendee.getParameters().add(Rsvp.TRUE);
            event.getProperties().add(attendee);
        });
	    
	    // Add the event to the calendar
		calendar.getComponents().add(event);
		    
        Charset charset = StandardCharsets.UTF_8;
        try (InputStream inputStream = new ByteArrayInputStream(calendar.toString().getBytes(charset))) {
            Core.storeFileDocumentContent(getContext(), this.IcalFile.getMendixObject(), inputStream);
        }
        this.IcalFile.setName(getContext(), "event.ics");
        return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_ICalFile";
	}

	// BEGIN EXTRA CODE
    private static java.util.stream.Stream<String> getAttendees(String recipients) {
        if (recipients == null) {
            return java.util.stream.Stream.empty(); // Return an empty stream if recipients are null
        }

        return java.util.Arrays.stream(recipients.split("[,;]")).map(String::trim);
    }
	// END EXTRA CODE
}
